@page "/students"

@using System.Net.Http.Json
@using BookShopBlazor.Service;
@using Frontend.Entities.DTO.Student;
@using Frontend.Entities.ModelView;
@inject StudentService studentService
@inject IDialogService _dialogService;
<MudCard Elevation="25">
  
    <MudCardContent>
        <MudTextField @bind-Value="createSTudent.FirstName" Label="First Name" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
        <MudTextField @bind-Value="createSTudent.LastName" Label="Last Name" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
        <MudTextField @bind-Value="createSTudent.Phone" Label="Phone Number" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
        <br />
        <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="AddStudent">Save Customer</MudButton>
    </MudCardContent>
</MudCard>

<ToolBarContent>
    <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" IconSize="Size.Medium" Class="mt-0"></MudTextField>
</ToolBarContent>
<MudTable Items="@Students" Filter="new Func<StudentDTO, bool>(FilterFunc)">
    <HeaderContent>
        <MudTh>#</MudTh>
        <MudTh>FirstName</MudTh>
        <MudTh>LastName</MudTh>
        <MudTh>Email</MudTh>
        <MudTh>Phone</MudTh>
        <MudTh>Date</MudTh>
    </HeaderContent>

    <RowTemplate>
        <MudTd>@context.Id</MudTd>
        <MudTd>@context.FirstName</MudTd>
        <MudTd>@context.LastName</MudTd>
        <MudTd>@context.Email</MudTd>
        <MudTd>@context.Phone</MudTd>
        <MudTd>@context.DateOfBirth</MudTd>
        <MudTd>
            <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Edit" />
        </MudTd>
        <MudTd>
            <MudButton  Color="Color.Secondary" OnClick="() => DeleteStudent(context.Id)">Delete </MudButton>
                <MudFab Color="Color.Error" StartIcon="@Icons.Material.Filled.Delete" />
        </MudTd>
    </RowTemplate>

</MudTable>


@code {
    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private string searchString = "";
    private StudentDTO selectedStudent = null;
    private CreateStudentDTO createSTudent;
    private IEnumerable<StudentDTO> Students = new List<StudentDTO>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Students = await studentService.GetAllStudent();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private async Task DeleteStudent(int studentId)
    {
        bool? result = await _dialogService.ShowMessageBox(
    "Delete Confirmation",
    "Deleting can not be undone!",
    yesText: "Delete!", cancelText: $"Cancel{studentId}");
        Console.WriteLine("delete");
        try
        {
            await studentService.DeleteStudent(studentId);
            await OnInitializedAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }

    }

    private async Task AddStudent()
    {

        if (createSTudent.FirstName is null)
            throw new Exception("fname is null");

        try
        {
            await studentService.AddStudent(createSTudent);
            await OnInitializedAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
    private bool FilterFunc(StudentDTO student)
    {
        Console.WriteLine("filkte");
        string search = searchString.ToLower();
        if (string.IsNullOrWhiteSpace(search))
            return true;
        if (student.FirstName.ToLower().Contains(search, StringComparison.OrdinalIgnoreCase))
            return true;
        if (student.LastName.ToLower().Contains(search))
            return true;
        if (student.Email.ToLower().Contains(search))
            return true;
        if (student.Phone.ToLower().Contains(search))
            return true;
        return false;
    }
}
